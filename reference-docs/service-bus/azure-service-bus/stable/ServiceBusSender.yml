### YamlMime:TSType
name: ServiceBusSender
uid: '@azure/service-bus.ServiceBusSender|stable'
package: '@azure/service-bus|stable'
summary: >-
  A Sender can be used to send messages, schedule messages to be sent at a later
  time

  and cancel such scheduled messages.

  Use the `createSender` function on the ServiceBusClient to instantiate a
  Sender.

  The Sender class is an abstraction over the underlying AMQP sender link.
fullName: ServiceBusSender
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: entityPath
    uid: '@azure/service-bus.ServiceBusSender.entityPath|stable'
    package: '@azure/service-bus|stable'
    summary: Path of the entity for which the sender has been created.
    fullName: entityPath
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'entityPath: string'
      return:
        description: ''
        type: string
  - name: isClosed
    uid: '@azure/service-bus.ServiceBusSender.isClosed|stable'
    package: '@azure/service-bus|stable'
    summary: >-
      Returns `true` if either the sender or the client that created it has been
      closed.
    fullName: isClosed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isClosed: boolean'
      return:
        description: ''
        type: boolean
methods:
  - name: cancelScheduledMessages(Long_2 | Long_2[], OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSender.cancelScheduledMessages|stable'
    package: '@azure/service-bus|stable'
    summary: >-
      Cancels multiple messages that were scheduled to appear on a ServiceBus
      Queue/Subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelScheduledMessages(sequenceNumbers: Long_2 | Long_2[],
        options?: OperationOptionsBase): Promise<void>
      parameters:
        - id: sequenceNumbers
          type: Long_2 | Long_2[]
          description: >-
            Sequence number or an array of sequence numbers of the messages to
            be cancelled.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase|stable" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: close()
    uid: '@azure/service-bus.ServiceBusSender.close|stable'
    package: '@azure/service-bus|stable'
    summary: >-
      Closes the underlying AMQP sender link.

      Once closed, the sender cannot be used for any further operations.

      Use the `createSender` function on the QueueClient or TopicClient to
      instantiate a new Sender
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: createMessageBatch(CreateMessageBatchOptions)
    uid: '@azure/service-bus.ServiceBusSender.createMessageBatch|stable'
    package: '@azure/service-bus|stable'
    summary: >-
      Creates an instance of `ServiceBusMessageBatch` to which one can add
      messages until the maximum supported size is reached.

      The batch can be passed to the send method to send the messages to Azure
      Service Bus.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createMessageBatch(options?: CreateMessageBatchOptions):
        Promise<ServiceBusMessageBatch>
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.CreateMessageBatchOptions|stable" />
          description: >
            Configures the behavior of the batch.

            - `maxSizeInBytes`: The upper limit for the size of batch. The
            `tryAdd` function will return `false` after this limit is reached.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/service-bus.ServiceBusMessageBatch|stable" />&gt;
  - name: >-
      scheduleMessages(ServiceBusMessage | ServiceBusMessage[] |
      AmqpAnnotatedMessage | AmqpAnnotatedMessage[], Date, OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSender.scheduleMessages|stable'
    package: '@azure/service-bus|stable'
    summary: >-
      Schedules given messages to appear on Service Bus Queue/Subscription at a
      later time.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function scheduleMessages(messages: ServiceBusMessage |
        ServiceBusMessage[] | AmqpAnnotatedMessage | AmqpAnnotatedMessage[],
        scheduledEnqueueTimeUtc: Date, options?: OperationOptionsBase):
        Promise<Long_2[]>
      parameters:
        - id: messages
          type: >-
            <xref uid="@azure/service-bus.ServiceBusMessage|stable" /> | <xref
            uid="@azure/service-bus.ServiceBusMessage|stable" />[] |
            AmqpAnnotatedMessage | AmqpAnnotatedMessage[]
          description: Message or an array of messages that need to be scheduled.
        - id: scheduledEnqueueTimeUtc
          type: Date
          description: The UTC time at which the messages should be enqueued.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase|stable" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: >-
          The sequence numbers of messages that were scheduled.

          You will need the sequence number if you intend to cancel the
          scheduling of the messages.

          Save the `Long` type as-is in your application without converting to
          number. Since JavaScript

          only supports 53 bit numbers, converting the `Long` to number will
          cause loss in precision.
        type: Promise&lt;Long_2[]&gt;
  - name: >-
      sendMessages(ServiceBusMessage | ServiceBusMessage[] |
      ServiceBusMessageBatch | AmqpAnnotatedMessage | AmqpAnnotatedMessage[],
      OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSender.sendMessages|stable'
    package: '@azure/service-bus|stable'
    summary: >
      Sends the given messages after creating an AMQP Sender link if it doesn't
      already exist.

      - To send messages to a `session` and/or `partition` enabled Queue/Topic,
      set the `sessionId`

      and/or `partitionKey` properties respectively on the messages.

      - All messages passed to the same sendMessages() call should have the same
      `sessionId` (if using
       sessions) and the same `partitionKey` (if using partitions).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendMessages(messages: ServiceBusMessage | ServiceBusMessage[]
        | ServiceBusMessageBatch | AmqpAnnotatedMessage |
        AmqpAnnotatedMessage[], options?: OperationOptionsBase): Promise<void>
      parameters:
        - id: messages
          type: >-
            <xref uid="@azure/service-bus.ServiceBusMessage|stable" /> | <xref
            uid="@azure/service-bus.ServiceBusMessage|stable" />[] | <xref
            uid="@azure/service-bus.ServiceBusMessageBatch|stable" /> |
            AmqpAnnotatedMessage | AmqpAnnotatedMessage[]
          description: >-
            A single message or an array of messages or a batch of messages
            created via the createBatch()

            method to send.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase|stable" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: ''
        type: Promise&lt;void&gt;
