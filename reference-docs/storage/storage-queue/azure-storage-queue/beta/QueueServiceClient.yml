### YamlMime:TSType
name: QueueServiceClient
uid: '@azure/storage-queue.QueueServiceClient|beta'
package: '@azure/storage-queue|beta'
summary: >-
  A QueueServiceClient represents a URL to the Azure Storage Queue service
  allowing you

  to manipulate queues.
fullName: QueueServiceClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: QueueServiceClient(string, Pipeline)
    uid: '@azure/storage-queue.QueueServiceClient.constructor_1|beta'
    package: '@azure/storage-queue|beta'
    summary: Creates an instance of QueueServiceClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new QueueServiceClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue service, such as
                                "https://myaccount.queue.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-queue.Pipeline|beta" />
          description: |
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      QueueServiceClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-queue.QueueServiceClient.constructor|beta'
    package: '@azure/storage-queue|beta'
    summary: Creates an instance of QueueServiceClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new QueueServiceClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue service, such as
                                "https://myaccount.queue.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-queue.StorageSharedKeyCredential|beta" />
            | <xref uid="@azure/storage-queue.AnonymousCredential|beta" /> |
            TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-queue.StoragePipelineOptions|beta" />
          description: >
            Options to configure the HTTP pipeline.


            Example using DefaultAzureCredential from `@azure/identity`:


            ```js

            const account = "<account>";


            const credential = new DefaultAzureCredential();


            const queueServiceClient = new QueueServiceClient(
              `https://${account}.queue.core.windows.net`,
              credential
            }

            ```


            Example using an account name/key:


            ```js

            const account = "<account>";


            const sharedKeyCredential = new StorageSharedKeyCredential(account,
            "<account key>");


            const queueServiceClient = new QueueServiceClient(
              `https://${account}.queue.core.windows.net`,
              sharedKeyCredential,
              {
                retryOptions: { maxTries: 4 }, // Retry options
                telemetry: { value: "BasicSample/V11.0.0" } // Customized telemetry string
              }
            );

            ```
properties:
  - name: accountName
    uid: '@azure/storage-queue.QueueServiceClient.accountName|beta'
    package: '@azure/storage-queue|beta'
    summary: ''
    fullName: accountName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/storage-queue.QueueServiceClient.url|beta'
    package: '@azure/storage-queue|beta'
    summary: URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
methods:
  - name: createQueue(string, QueueCreateOptions)
    uid: '@azure/storage-queue.QueueServiceClient.createQueue|beta'
    package: '@azure/storage-queue|beta'
    summary: >-
      Creates a new queue under the specified account.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createQueue(queueName: string, options?: QueueCreateOptions):
        Promise<QueueCreateResponse>
      parameters:
        - id: queueName
          type: string
          description: name of the queue to create
        - id: options
          type: <xref uid="@azure/storage-queue.QueueCreateOptions|beta" />
          description: Options to Queue create operation.
      return:
        description: Response data for the Queue create operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.QueueCreateResponse|beta"
          />&gt;
  - name: deleteQueue(string, QueueDeleteOptions)
    uid: '@azure/storage-queue.QueueServiceClient.deleteQueue|beta'
    package: '@azure/storage-queue|beta'
    summary: >-
      Deletes the specified queue permanently.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteQueue(queueName: string, options?: QueueDeleteOptions):
        Promise<QueueDeleteResponse>
      parameters:
        - id: queueName
          type: string
          description: name of the queue to delete.
        - id: options
          type: <xref uid="@azure/storage-queue.QueueDeleteOptions|beta" />
          description: Options to Queue delete operation.
      return:
        description: Response data for the Queue delete operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.QueueDeleteResponse|beta"
          />&gt;
  - name: fromConnectionString(string, StoragePipelineOptions)
    uid: '@azure/storage-queue.QueueServiceClient.fromConnectionString|beta'
    package: '@azure/storage-queue|beta'
    summary: Creates an instance of QueueServiceClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string, options?:
        StoragePipelineOptions): QueueServiceClient
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: options
          type: <xref uid="@azure/storage-queue.StoragePipelineOptions|beta" />
          description: Options to configure the HTTP pipeline.
      return:
        description: A new QueueServiceClient object from the given connection string.
        type: <xref uid="@azure/storage-queue.QueueServiceClient|beta" />
  - name: >-
      generateAccountSasUrl(Date, AccountSASPermissions, string,
      ServiceGenerateAccountSasUrlOptions)
    uid: '@azure/storage-queue.QueueServiceClient.generateAccountSasUrl|beta'
    package: '@azure/storage-queue|beta'
    summary: >-
      Only available for QueueServiceClient constructed with a shared key
      credential.

      Generates an account Shared Access Signature (SAS) URI based on the client
      properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.



      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateAccountSasUrl(expiresOn?: Date, permissions?:
        AccountSASPermissions, resourceTypes?: string, options?:
        ServiceGenerateAccountSasUrlOptions): string
      parameters:
        - id: expiresOn
          type: Date
          description: >-
            Optional. The time at which the shared access signature becomes
            invalid. Default to an hour later if not specified.
        - id: permissions
          type: <xref uid="@azure/storage-queue.AccountSASPermissions|beta" />
          description: Specifies the list of permissions to be associated with the SAS.
        - id: resourceTypes
          type: string
          description: >-
            Specifies the resource types associated with the shared access
            signature.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.ServiceGenerateAccountSasUrlOptions|beta"
            />
          description: Optional parameters.
      return:
        description: >-
          An account SAS URI consisting of the URI to the resource represented
          by this client, followed by the generated SAS token.
        type: string
  - name: getProperties(ServiceGetPropertiesOptions)
    uid: '@azure/storage-queue.QueueServiceClient.getProperties|beta'
    package: '@azure/storage-queue|beta'
    summary: >-
      Gets the properties of a storage account’s Queue service, including
      properties

      for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-properties
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: ServiceGetPropertiesOptions):
        Promise<ServiceGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceGetPropertiesOptions|beta" />
          description: Options to get properties operation.
      return:
        description: Response data including the queue service properties.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.ServiceGetPropertiesResponse|beta" />&gt;
  - name: getQueueClient(string)
    uid: '@azure/storage-queue.QueueServiceClient.getQueueClient|beta'
    package: '@azure/storage-queue|beta'
    summary: Creates a <xref:@azure/storage-queue.QueueClient> object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getQueueClient(queueName: string): QueueClient'
      parameters:
        - id: queueName
          type: string
          description: '-'
      return:
        description: >-
          a new QueueClient


          Example usage:


          ```js

          const queueClient = queueServiceClient.getQueueClient("<new queue
          name>");

          const createQueueResponse = await queueClient.create();

          ```
        type: <xref uid="@azure/storage-queue.QueueClient|beta" />
  - name: getStatistics(ServiceGetStatisticsOptions)
    uid: '@azure/storage-queue.QueueServiceClient.getStatistics|beta'
    package: '@azure/storage-queue|beta'
    summary: >-
      Retrieves statistics related to replication for the Queue service. It is
      only

      available on the secondary location endpoint when read-access
      geo-redundant

      replication is enabled for the storage account.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-stats
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getStatistics(options?: ServiceGetStatisticsOptions):
        Promise<ServiceGetStatisticsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceGetStatisticsOptions|beta" />
          description: Options to get statistics operation.
      return:
        description: Response data for get statistics the operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.ServiceGetStatisticsResponse|beta" />&gt;
  - name: listQueues(ServiceListQueuesOptions)
    uid: '@azure/storage-queue.QueueServiceClient.listQueues|beta'
    package: '@azure/storage-queue|beta'
    summary: >
      Returns an async iterable iterator to list all the queues

      under the specified account.

      .byPage() returns an async iterable iterator to list the queues in pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const item of queueServiceClient.listQueues()) {
        console.log(`Queue${i}: ${item.name}`);
        i++;
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iterator = queueServiceClient.listQueues();

      let item = await iterator.next();

      while (!item.done) {
        console.log(`Queue${i}: ${iterator.value.name}`);
        i++;
        item = await iterator.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const item2 of queueServiceClient.listQueues().byPage({
      maxPageSize: 20 })) {
        if (item2.queueItems) {
          for (const queueItem of item2.queueItems) {
            console.log(`Queue${i}: ${queueItem.name}`);
            i++;
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = queueServiceClient.listQueues().byPage({ maxPageSize: 2 });

      let item = (await iterator.next()).value;


      // Prints 2 queue names

      if (item.queueItems) {
        for (const queueItem of item.queueItems) {
          console.log(`Queue${i}: ${queueItem.name}`);
          i++;
        }
      }

      // Gets next marker

      let marker = item.continuationToken;


      // Passing next marker as continuationToken

      iterator = queueServiceClient.listQueues().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      item = (await iterator.next()).value;


      // Prints 10 queue names

      if (item.queueItems) {
        for (const queueItem of item.queueItems) {
          console.log(`Queue${i}: ${queueItem.name}`);
          i++;
        }
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listQueues(options?: ServiceListQueuesOptions):
        PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceListQueuesOptions|beta" />
          description: Options to list queues operation.
      return:
        description: An asyncIterableIterator that supports paging.
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-queue.QueueItem|beta" />, <xref
          uid="@azure/storage-queue.ServiceListQueuesSegmentResponse|beta"
          />&gt;
  - name: setProperties(QueueServiceProperties, ServiceGetPropertiesOptions)
    uid: '@azure/storage-queue.QueueServiceClient.setProperties|beta'
    package: '@azure/storage-queue|beta'
    summary: >-
      Sets properties for a storage account’s Queue service endpoint, including
      properties

      for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft
      delete settings.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-service-properties
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties: QueueServiceProperties, options?:
        ServiceGetPropertiesOptions): Promise<ServiceSetPropertiesResponse>
      parameters:
        - id: properties
          type: <xref uid="@azure/storage-queue.QueueServiceProperties|beta" />
          description: '-'
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceGetPropertiesOptions|beta" />
          description: Options to set properties operation.
      return:
        description: Response data for the Set Properties operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.ServiceSetPropertiesResponse|beta" />&gt;
extends: <xref uid="@azure/storage-queue.StorageClient|beta" />
