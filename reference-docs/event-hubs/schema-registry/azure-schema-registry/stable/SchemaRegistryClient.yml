### YamlMime:TSType
name: SchemaRegistryClient
uid: '@azure/schema-registry.SchemaRegistryClient|stable'
package: '@azure/schema-registry|stable'
summary: Client for Azure Schema Registry service.
fullName: SchemaRegistryClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: SchemaRegistryClient(string, TokenCredential, SchemaRegistryClientOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.constructor|stable'
    package: '@azure/schema-registry|stable'
    summary: Creates a new client for Azure Schema Registry service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new SchemaRegistryClient(fullyQualifiedNamespace: string, credential:
        TokenCredential, options?: SchemaRegistryClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The Schema Registry service qualified namespace URL, for example
                                             https://mynamespace.servicebus.windows.net.
        - id: credential
          type: TokenCredential
          description: Credential to authenticate requests to the service.
        - id: options
          type: >-
            <xref
            uid="@azure/schema-registry.SchemaRegistryClientOptions|stable" />
          description: |
            Options to configure API requests to the service.
properties:
  - name: fullyQualifiedNamespace
    uid: '@azure/schema-registry.SchemaRegistryClient.fullyQualifiedNamespace|stable'
    package: '@azure/schema-registry|stable'
    summary: The Schema Registry service fully qualified namespace URL.
    fullName: fullyQualifiedNamespace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'fullyQualifiedNamespace: string'
      return:
        description: ''
        type: string
methods:
  - name: getSchema(string, GetSchemaOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.getSchema|stable'
    package: '@azure/schema-registry|stable'
    summary: >
      Gets an existing schema by ID. If the schema was not found, a RestError
      with

      status code 404 will be thrown, which could be caught as follows:

      ```js

      ...

      } catch (e) {

      if (typeof e === "object" && e.statusCode === 404) {

      ...;

      }

      throw e;

      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSchema(schemaId: string, options?: GetSchemaOptions):
        Promise<Schema>
      parameters:
        - id: schemaId
          type: string
          description: Unique schema ID.
        - id: options
          type: <xref uid="@azure/schema-registry.GetSchemaOptions|stable" />
          description: ''
      return:
        description: Schema with given ID.
        type: Promise&lt;<xref uid="@azure/schema-registry.Schema|stable" />&gt;
  - name: getSchemaProperties(SchemaDescription, GetSchemaPropertiesOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.getSchemaProperties|stable'
    package: '@azure/schema-registry|stable'
    summary: |-
      Gets the ID of an existing schema with matching name, group, type, and
      definition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSchemaProperties(schema: SchemaDescription, options?:
        GetSchemaPropertiesOptions): Promise<SchemaProperties>
      parameters:
        - id: schema
          type: <xref uid="@azure/schema-registry.SchemaDescription|stable" />
          description: Schema to match.
        - id: options
          type: >-
            <xref uid="@azure/schema-registry.GetSchemaPropertiesOptions|stable"
            />
          description: ''
      return:
        description: Matched schema's ID.
        type: >-
          Promise&lt;<xref uid="@azure/schema-registry.SchemaProperties|stable"
          />&gt;
  - name: registerSchema(SchemaDescription, RegisterSchemaOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.registerSchema|stable'
    package: '@azure/schema-registry|stable'
    summary: >
      Registers a new schema and returns its ID.

      If schema of specified name does not exist in the specified group, a
      schema

      is created at version 1. If schema of specified name exists already in

      specified group, schema is created at latest version + 1.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function registerSchema(schema: SchemaDescription, options?:
        RegisterSchemaOptions): Promise<SchemaProperties>
      parameters:
        - id: schema
          type: <xref uid="@azure/schema-registry.SchemaDescription|stable" />
          description: Schema to register.
        - id: options
          type: <xref uid="@azure/schema-registry.RegisterSchemaOptions|stable" />
          description: ''
      return:
        description: Registered schema's ID.
        type: >-
          Promise&lt;<xref uid="@azure/schema-registry.SchemaProperties|stable"
          />&gt;
