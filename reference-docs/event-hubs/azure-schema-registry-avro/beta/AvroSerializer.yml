### YamlMime:TSType
name: AvroSerializer
uid: '@azure/schema-registry-avro.AvroSerializer|beta'
package: '@azure/schema-registry-avro|beta'
summary: |-
  Avro serializer that obtains schemas from a schema registry and does not
  pack schemas into its payloads.
fullName: AvroSerializer<MessageT>
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: AvroSerializer(SchemaRegistry, AvroSerializerOptions<MessageT>)
    uid: '@azure/schema-registry-avro.AvroSerializer.constructor|beta'
    package: '@azure/schema-registry-avro|beta'
    summary: Creates a new serializer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new AvroSerializer(client: SchemaRegistry, options?:
        AvroSerializerOptions<MessageT>)
      parameters:
        - id: client
          type: SchemaRegistry
          description: |
            Schema Registry where schemas are registered and obtained.
                            Usually this is a SchemaRegistryClient instance.
        - id: options
          type: >-
            <xref uid="@azure/schema-registry-avro.AvroSerializerOptions|beta"
            />&lt;MessageT&gt;
          description: ''
methods:
  - name: deserialize(MessageT, DeserializeOptions)
    uid: '@azure/schema-registry-avro.AvroSerializer.deserialize|beta'
    package: '@azure/schema-registry-avro|beta'
    summary: >-
      Deserializes the payload of the message using the schema ID in the content
      type

      field if no schema was provided.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deserialize(message: MessageT, options?: DeserializeOptions):
        Promise<unknown>
      parameters:
        - id: message
          type: MessageT
          description: The message with the payload to be deserialized.
        - id: options
          type: <xref uid="@azure/schema-registry-avro.DeserializeOptions|beta" />
          description: Decoding options.
      return:
        description: The deserialized value.
        type: Promise&lt;unknown&gt;
  - name: serialize(unknown, string)
    uid: '@azure/schema-registry-avro.AvroSerializer.serialize|beta'
    package: '@azure/schema-registry-avro|beta'
    summary: >-
      serializes the value parameter according to the input schema and creates a
      message

      with the serialized data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function serialize(value: unknown, schema: string): Promise<MessageT>'
      parameters:
        - id: value
          type: unknown
          description: The value to serialize.
        - id: schema
          type: string
          description: The Avro schema to use.
      return:
        description: |-
          A new message with the serialized value. The structure of message is
          constrolled by the message factory option.
        type: Promise&lt;MessageT&gt;
