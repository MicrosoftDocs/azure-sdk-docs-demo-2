### YamlMime:TSType
name: ContainerRepository
uid: '@azure/container-registry.ContainerRepository|beta'
package: '@azure/container-registry|beta'
summary: >
  A `repository` in a container registry is a logical grouping of images or
  artifacts that share the same name.  For example,

  different versions of a `hello-world` application could have tags `v1` and
  `v2`, and be grouped by the repository `hello-world`.

  The <xref:@azure/container-registry.ContainerRepository|beta> interface is a
  helper that groups information and operations about a repository in this

  container registry.
fullName: ContainerRepository
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: name
    uid: '@azure/container-registry.ContainerRepository.name|beta'
    package: '@azure/container-registry|beta'
    summary: Repository name.
    fullName: name
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string'
      return:
        description: ''
        type: string
  - name: registryEndpoint
    uid: '@azure/container-registry.ContainerRepository.registryEndpoint|beta'
    package: '@azure/container-registry|beta'
    summary: The Azure Container Registry endpoint.
    fullName: registryEndpoint
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'registryEndpoint: string'
      return:
        description: ''
        type: string
methods:
  - name: delete(DeleteRepositoryOptions)
    uid: '@azure/container-registry.ContainerRepository.delete|beta'
    package: '@azure/container-registry|beta'
    summary: >-
      Deletes this repository and all artifacts that are part of its logical
      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: DeleteRepositoryOptions): Promise<void>'
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/container-registry.DeleteRepositoryOptions|beta"
            />
          description: |
            optional configuration for the operation
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: getArtifact(string)
    uid: '@azure/container-registry.ContainerRepository.getArtifact|beta'
    package: '@azure/container-registry|beta'
    summary: >-
      Returns an helper instance of
      <xref:@azure/container-registry.RegistryArtifact|beta> for the given tag
      or digest.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getArtifact(tagOrDigest: string): RegistryArtifact'
      parameters:
        - id: tagOrDigest
          type: string
          description: |
            the tag or digest of the artifact
      return:
        description: ''
        type: <xref uid="@azure/container-registry.RegistryArtifact|beta" />
  - name: getProperties(GetRepositoryPropertiesOptions)
    uid: '@azure/container-registry.ContainerRepository.getProperties|beta'
    package: '@azure/container-registry|beta'
    summary: Retrieves the properties of this repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: GetRepositoryPropertiesOptions):
        Promise<ContainerRepositoryProperties>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/container-registry.GetRepositoryPropertiesOptions|beta"
            />
          description: |
            -
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/container-registry.ContainerRepositoryProperties|beta"
          />&gt;
  - name: listManifestProperties(ListManifestPropertiesOptions)
    uid: '@azure/container-registry.ContainerRepository.listManifestProperties|beta'
    package: '@azure/container-registry|beta'
    summary: >-
      Returns an async iterable iterator to list manifest properties.

      This is useful for determining the collection of artifacts associated with

      this repository, as each artifact is uniquely identified by its manifest.

      Example using `for-await-of` syntax:


      ```javascript

      const client = new ContainerRegistryClient(url, credential);

      const repository = client.getRepository(repositoryName)

      for await (const manifest of repository.listManifestProperties()) {
        console.log("manifest: ", manifest);
      }

      ```


      Example using `iter.next()`:


      ```javascript

      const iter = repository.listManifestProperties();

      let item = await iter.next();

      while (!item.done) {
        console.log("manifest properties: ", item.value);
        item = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```javascript

      const pages = repository.listManifestProperties().byPage({ maxPageSize: 2
      });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const manifestProperties of page.value) {
           console.log(`  manifest properties: ${manifestProperties}`);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listManifestProperties(options?:
        ListManifestPropertiesOptions):
        PagedAsyncIterableIterator<ArtifactManifestProperties>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/container-registry.ListManifestPropertiesOptions|beta"
            />
          description: |
            -
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/container-registry.ArtifactManifestProperties|beta" />&gt;
  - name: updateProperties(UpdateRepositoryPropertiesOptions)
    uid: '@azure/container-registry.ContainerRepository.updateProperties|beta'
    package: '@azure/container-registry|beta'
    summary: |-
      Updates the properties of this repository.
      Example usage:

      ```javascript
      const client = new ContainerRegistryClient(url, credential);
      const repository = client.getRepository(repositoryName)
      const updated = await repository.updateProperties({
        canDelete: false,
        canList: false,
        canRead: false,
        canWrite: false
      });
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateProperties(options: UpdateRepositoryPropertiesOptions):
        Promise<ContainerRepositoryProperties>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/container-registry.UpdateRepositoryPropertiesOptions|beta"
            />
          description: |
            -
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/container-registry.ContainerRepositoryProperties|beta"
          />&gt;
