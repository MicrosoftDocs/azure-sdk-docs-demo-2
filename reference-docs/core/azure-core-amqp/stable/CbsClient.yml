### YamlMime:TSType
name: CbsClient
uid: '@azure/core-amqp.CbsClient|stable'
package: '@azure/core-amqp|stable'
summary: >-
  Describes the EventHub/ServiceBus Cbs client that talks to the $cbs endpoint
  over AMQP connection.
fullName: CbsClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: CbsClient(Connection, string)
    uid: '@azure/core-amqp.CbsClient.constructor|stable'
    package: '@azure/core-amqp|stable'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new CbsClient(connection: Connection, connectionLock: string)'
      parameters:
        - id: connection
          type: Connection
          description: The AMQP connection.
        - id: connectionLock
          type: string
          description: |
            A unique string (usually a guid) per connection.
properties:
  - name: cbsLock
    uid: '@azure/core-amqp.CbsClient.cbsLock|stable'
    package: '@azure/core-amqp|stable'
    summary: >-
      The unique lock name per $cbs session per connection that is used to

      acquire the lock for establishing a cbs session if one does not exist for
      an amqp connection.
    fullName: cbsLock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cbsLock: string'
      return:
        description: ''
        type: string
  - name: connection
    uid: '@azure/core-amqp.CbsClient.connection|stable'
    package: '@azure/core-amqp|stable'
    summary: The AMQP connection.
    fullName: connection
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'connection: Connection'
      return:
        description: ''
        type: Connection
  - name: connectionLock
    uid: '@azure/core-amqp.CbsClient.connectionLock|stable'
    package: '@azure/core-amqp|stable'
    summary: >-
      The unique lock name per connection that is used to

      acquire the lock for establishing an amqp connection if one does not
      exist.
    fullName: connectionLock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'connectionLock: string'
      return:
        description: ''
        type: string
  - name: endpoint
    uid: '@azure/core-amqp.CbsClient.endpoint|stable'
    package: '@azure/core-amqp|stable'
    summary: CBS endpoint - "$cbs"
    fullName: endpoint
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'endpoint: string'
      return:
        description: ''
        type: string
  - name: replyTo
    uid: '@azure/core-amqp.CbsClient.replyTo|stable'
    package: '@azure/core-amqp|stable'
    summary: CBS replyTo - The receiver link name that the service should reply to.
    fullName: replyTo
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'replyTo: string'
      return:
        description: ''
        type: string
methods:
  - name: close()
    uid: '@azure/core-amqp.CbsClient.close|stable'
    package: '@azure/core-amqp|stable'
    summary: |-
      Closes the AMQP cbs session to the EventHub/ServiceBus for this client,
      returning a promise that will be resolved when disconnection is completed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'init({ abortSignal?: AbortSignalLike, timeoutInMs?: number })'
    uid: '@azure/core-amqp.CbsClient.init|stable'
    package: '@azure/core-amqp|stable'
    summary: >-
      Creates a singleton instance of the CBS session if it hasn't been
      initialized previously on

      the given connection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function init(options?: { abortSignal?: AbortSignalLike, timeoutInMs?:
        number }): Promise<void>
      parameters:
        - id: options
          type: '{ abortSignal?: AbortSignalLike, timeoutInMs?: number }'
          description: >-
            Optional parameters that can be used to affect this method's
            behavior.
               For example, `abortSignal` can be passed to allow cancelling an in-progress `init` invocation.
      return:
        description: Promise<void>.
        type: Promise&lt;void&gt;
  - name: isOpen()
    uid: '@azure/core-amqp.CbsClient.isOpen|stable'
    package: '@azure/core-amqp|stable'
    summary: Indicates whether the cbs sender receiver link is open or closed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isOpen(): boolean'
      return:
        description: '`true` open, `false` closed.'
        type: boolean
  - name: >-
      negotiateClaim(string, string, TokenType, { abortSignal?: AbortSignalLike,
      timeoutInMs?: number })
    uid: '@azure/core-amqp.CbsClient.negotiateClaim|stable'
    package: '@azure/core-amqp|stable'
    summary: Negotiates the CBS claim with the EventHub/ServiceBus Service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function negotiateClaim(audience: string, token: string, tokenType:
        TokenType, options?: { abortSignal?: AbortSignalLike, timeoutInMs?:
        number }): Promise<CbsResponse>
      parameters:
        - id: audience
          type: string
          description: |-
            The entity token audience for which the token is requested in one
            of the following forms:

            - **ServiceBus**
               - **Sender**
                   - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
                   - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`

               - **Receiver**
                    - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
                    - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`

               - **ManagementClient**
                    - `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.
                    - `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.

            - **EventHubs**
                - **Sender**
                     - `"sb://<yournamespace>.servicebus.windows.net/<hubName>"`
                     - `"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>"`.

                - **Receiver**
                    - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>"`.

                - **ManagementClient**
                    - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management"`.
        - id: token
          type: string
          description: The token that needs to be sent in the put-token request.
        - id: tokenType
          type: <xref uid="@azure/core-amqp.TokenType|stable" />
          description: >-
            The type of token being used. For example, 'jwt' or
            'servicebus.windows.net:sastoken'.
        - id: options
          type: '{ abortSignal?: AbortSignalLike, timeoutInMs?: number }'
          description: >-
            Optional parameters that can be used to affect this method's
            behavior.
               For example, `abortSignal` can be passed to allow cancelling an in-progress `negotiateClaim` invocation.
      return:
        description: |-
          A Promise that resolves when $cbs authentication is successful
          and rejects when an error occurs during $cbs authentication.
        type: Promise&lt;<xref uid="@azure/core-amqp.CbsResponse|stable" />&gt;
  - name: remove()
    uid: '@azure/core-amqp.CbsClient.remove|stable'
    package: '@azure/core-amqp|stable'
    summary: Removes the AMQP cbs session to the EventHub/ServiceBus for this client,
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function remove()
