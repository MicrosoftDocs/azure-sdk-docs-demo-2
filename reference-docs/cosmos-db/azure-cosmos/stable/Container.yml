### YamlMime:TSType
name: Container
uid: '@azure/cosmos.Container|stable'
package: '@azure/cosmos|stable'
summary: >-
  Operations for reading, replacing, or deleting a specific, existing container
  by id.


  See <xref:@azure/cosmos.Containers|stable> for creating new containers, and
  reading/querying all containers; use `.containers`.


  Note: all these operations make calls against a fixed budget.

  You should design your system such that these calls scale sublinearly with
  your application.

  For instance, do not call `container(id).read()` before every single
  `item.read()` call, to ensure the container exists;

  do this once on application start up.
fullName: Container
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: conflicts
    uid: '@azure/cosmos.Container.conflicts|stable'
    package: '@azure/cosmos|stable'
    summary: |
      Operations for reading and querying conflicts for the given container.
      For reading or deleting a specific conflict, use `.conflict(id)`.
    fullName: conflicts
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Conflicts conflicts
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Conflicts|stable" />
  - name: database
    uid: '@azure/cosmos.Container.database|stable'
    package: '@azure/cosmos|stable'
    summary: ''
    fullName: database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Database|stable" />
  - name: id
    uid: '@azure/cosmos.Container.id|stable'
    package: '@azure/cosmos|stable'
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: items
    uid: '@azure/cosmos.Container.items|stable'
    package: '@azure/cosmos|stable'
    summary: >+
      Operations for creating new items, and reading/querying all items

      For reading, replacing, or deleting an existing item, use `.item(id)`.



      **Example**


      Create a new item

      ```typescript

      const {body: createdItem} = await container.items.create({id: "<item id>",
      properties: {}});

      ```

    fullName: items
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Items items
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Items|stable" />
  - name: scripts
    uid: '@azure/cosmos.Container.scripts|stable'
    package: '@azure/cosmos|stable'
    summary: All operations for Stored Procedures, Triggers, and User Defined Functions
    fullName: scripts
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Scripts scripts
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Scripts|stable" />
  - name: url
    uid: '@azure/cosmos.Container.url|stable'
    package: '@azure/cosmos|stable'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: conflict(string, PartitionKey)
    uid: '@azure/cosmos.Container.conflict|stable'
    package: '@azure/cosmos|stable'
    summary: >-
      Used to read, replace, or delete a specific, existing
      <xref:@azure/cosmos.Conflict|stable> by id.

      Use `.conflicts` for creating new conflicts, or querying/reading all
      conflicts.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function conflict(id: string, partitionKey?: PartitionKey): Conflict'
      parameters:
        - id: id
          type: string
          description: |
            The id of the <xref:@azure/cosmos.Conflict|stable>.
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey|stable" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Conflict|stable" />
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Container.delete|stable'
    package: '@azure/cosmos|stable'
    summary: Delete the container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<ContainerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse|stable" />&gt;
  - name: getPartitionKeyDefinition()
    uid: '@azure/cosmos.Container.getPartitionKeyDefinition|stable'
    package: '@azure/cosmos|stable'
    summary: >-
      Gets the partition key definition first by looking into the cache
      otherwise by reading the collection.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: This method has been renamed to readPartitionKeyDefinition.
    syntax:
      content: >-
        function getPartitionKeyDefinition():
        Promise<ResourceResponse<PartitionKeyDefinition>>
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ResourceResponse|stable"
          />&lt;<xref uid="@azure/cosmos.PartitionKeyDefinition|stable"
          />&gt;&gt;
  - name: getQueryPlan(string | SqlQuerySpec)
    uid: '@azure/cosmos.Container.getQueryPlan|stable'
    package: '@azure/cosmos|stable'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getQueryPlan(query: string | SqlQuerySpec):
        Promise<Response_2<PartitionedQueryExecutionInfo>>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;Response_2&lt;PartitionedQueryExecutionInfo&gt;&gt;
  - name: item(string, PartitionKey)
    uid: '@azure/cosmos.Container.item|stable'
    package: '@azure/cosmos|stable'
    summary: >+
      Used to read, replace, or delete a specific, existing
      <xref:@azure/cosmos.Item|stable> by id.

      Use `.items` for creating new items, or querying/reading all items.



      **Example**


      Replace an item

      `const {body: replacedItem} = await container.item("<item id>",
      "<partition key value>").replace({id: "<item id>", title: "Updated post",
      authorID: 5});`

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function item(id: string, partitionKeyValue?: PartitionKey): Item'
      parameters:
        - id: id
          type: string
          description: The id of the <xref:@azure/cosmos.Item|stable>.
        - id: partitionKeyValue
          type: <xref uid="@azure/cosmos.PartitionKey|stable" />
          description: The value of the <xref:@azure/cosmos.Item|stable> partition key
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Item|stable" />
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Container.read|stable'
    package: '@azure/cosmos|stable'
    summary: Read the container's definition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<ContainerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse|stable" />&gt;
  - name: readOffer(RequestOptions)
    uid: '@azure/cosmos.Container.readOffer|stable'
    package: '@azure/cosmos|stable'
    summary: >-
      Gets offer on container. If none exists, returns an OfferResponse with
      undefined.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function readOffer(options?: RequestOptions): Promise<OfferResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.OfferResponse|stable" />&gt;
  - name: readPartitionKeyRanges(FeedOptions)
    uid: '@azure/cosmos.Container.readPartitionKeyRanges|stable'
    package: '@azure/cosmos|stable'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function readPartitionKeyRanges(feedOptions?: FeedOptions):
        QueryIterator<PartitionKeyRange>
      parameters:
        - id: feedOptions
          type: <xref uid="@azure/cosmos.FeedOptions|stable" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator|stable"
          />&lt;PartitionKeyRange&gt;
  - name: replace(ContainerDefinition, RequestOptions)
    uid: '@azure/cosmos.Container.replace|stable'
    package: '@azure/cosmos|stable'
    summary: Replace the container's definition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: ContainerDefinition, options?: RequestOptions):
        Promise<ContainerResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerDefinition|stable" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse|stable" />&gt;
