### YamlMime:TSType
name: Database
uid: '@azure/cosmos.Database|stable'
package: '@azure/cosmos|stable'
summary: >-
  Operations for reading or deleting an existing database.


  See <xref:@azure/cosmos.Databases> for creating new databases, and
  reading/querying all databases; use `client.databases`.


  Note: all these operations make calls against a fixed budget.

  You should design your system such that these calls scale sublinearly with
  your application.

  For instance, do not call `database.read()` before every single `item.read()`
  call, to ensure the database exists;

  do this once on application start up.
fullName: Database
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Database(CosmosClient, string, ClientContext)
    uid: '@azure/cosmos.Database.constructor|stable'
    package: '@azure/cosmos|stable'
    summary: >
      Returns a new <xref:@azure/cosmos.Database> instance.

      Note: the intention is to get this object from
      <xref:@azure/cosmos.CosmosClient> via `client.database(id)`, not to
      instantiate it yourself.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new Database(client: CosmosClient, id: string, clientContext:
        ClientContext)
      parameters:
        - id: client
          type: <xref uid="@azure/cosmos.CosmosClient|stable" />
          description: ''
        - id: id
          type: string
          description: ''
        - id: clientContext
          type: ClientContext
          description: ''
properties:
  - name: client
    uid: '@azure/cosmos.Database.client|stable'
    package: '@azure/cosmos|stable'
    summary: ''
    fullName: client
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'client: CosmosClient'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.CosmosClient|stable" />
  - name: containers
    uid: '@azure/cosmos.Database.containers|stable'
    package: '@azure/cosmos|stable'
    summary: >+
      Used for creating new containers, or querying/reading all containers.

      Use `.database(id)` to read, replace, or delete a specific, existing
      <xref:@azure/cosmos.Database> by id.



      **Example**


      Create a new container

      ```typescript

      const {body: containerDefinition, container} = await client.database("<db
      id>").containers.create({id: "<container id>"});

      ```

    fullName: containers
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'containers: Containers'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Containers|stable" />
  - name: id
    uid: '@azure/cosmos.Database.id|stable'
    package: '@azure/cosmos|stable'
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/cosmos.Database.url|stable'
    package: '@azure/cosmos|stable'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
  - name: users
    uid: '@azure/cosmos.Database.users|stable'
    package: '@azure/cosmos|stable'
    summary: >
      Used for creating new users, or querying/reading all users.

      Use `.user(id)` to read, replace, or delete a specific, existing
      <xref:@azure/cosmos.User> by id.
    fullName: users
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'users: Users'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Users|stable" />
methods:
  - name: container(string)
    uid: '@azure/cosmos.Database.container|stable'
    package: '@azure/cosmos|stable'
    summary: >+
      Used to read, replace, or delete a specific, existing
      <xref:@azure/cosmos.Database> by id.

      Use `.containers` creating new containers, or querying/reading all
      containers.



      **Example**


      Delete a container

      ```typescript

      await client.database("<db id>").container("<container id>").delete();

      ```

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function container(id: string): Container'
      parameters:
        - id: id
          type: string
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container|stable" />
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Database.delete|stable'
    package: '@azure/cosmos|stable'
    summary: Delete the given Database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<DatabaseResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.DatabaseResponse|stable" />&gt;
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Database.read|stable'
    package: '@azure/cosmos|stable'
    summary: Read the definition of the given Database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<DatabaseResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.DatabaseResponse|stable" />&gt;
  - name: readOffer(RequestOptions)
    uid: '@azure/cosmos.Database.readOffer|stable'
    package: '@azure/cosmos|stable'
    summary: >-
      Gets offer on database. If none exists, returns an OfferResponse with
      undefined.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function readOffer(options?: RequestOptions): Promise<OfferResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions|stable" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.OfferResponse|stable" />&gt;
  - name: user(string)
    uid: '@azure/cosmos.Database.user|stable'
    package: '@azure/cosmos|stable'
    summary: >
      Used to read, replace, or delete a specific, existing
      <xref:@azure/cosmos.User> by id.

      Use `.users` for creating new users, or querying/reading all users.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function user(id: string): User'
      parameters:
        - id: id
          type: string
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.User|stable" />
