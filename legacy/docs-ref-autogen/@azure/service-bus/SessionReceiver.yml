### YamlMime:TSType
name: SessionReceiver
uid: '@azure/service-bus - v1.1.10.SessionReceiver'
package: '@azure/service-bus - v1.1.10'
summary: >-
  The SessionReceiver class can be used to receive messages from a session
  enabled Queue or

  Subscription in a batch or by registering handlers.

  Use the `createReceiver` function on the QueueClient or SubscriptionClient to
  instantiate a

  SessionReceiver.

  The SessionReceiver class is an abstraction over the underlying AMQP receiver
  link.
fullName: SessionReceiver
remarks: ''
isDeprecated: false
type: class
properties:
  - name: isClosed
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.isClosed'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Returns `true` if the receiver is closed. This can happen either because
      the receiver

      itself has been closed or the client that created it has been closed.
    fullName: isClosed
    remarks: ''
    isDeprecated: false
    syntax:
      content: boolean isClosed
      return:
        description: ''
        type: boolean
  - name: receiveMode
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.receiveMode'
    package: '@azure/service-bus - v1.1.10'
    summary: Denotes receiveMode of this receiver.
    fullName: receiveMode
    remarks: ''
    isDeprecated: false
    syntax:
      content: ReceiveMode receiveMode
      return:
        description: ''
        type: '@azure/service-bus - <xref uid="v1.1.10.ReceiveMode" />'
  - name: sessionId
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.sessionId'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      The id of the session from which this receiver will receive messages.

      Will return undefined until a AMQP receiver link has been successfully set
      up for the session.
    fullName: sessionId
    remarks: ''
    isDeprecated: false
    syntax:
      content: string | undefined sessionId
      return:
        description: ''
        type: string | undefined
  - name: sessionLockedUntilUtc
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.sessionLockedUntilUtc'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      The time in UTC until which the session is locked.

      Everytime `renewSessionLock()` is called, this time gets updated to
      current time plus the lock

      duration as specified during the Queue/Subscription creation.


      Will return undefined until a AMQP receiver link has been successfully set
      up for the session.
    fullName: sessionLockedUntilUtc
    remarks: ''
    isDeprecated: false
    syntax:
      content: Date | undefined sessionLockedUntilUtc
      return:
        description: ''
        type: Date | undefined
methods:
  - name: close()
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.close'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Closes the underlying AMQP receiver link.

      Once closed, the receiver cannot be used for any further operations.

      Use the `createReceiver` function on the QueueClient or SubscriptionClient
      to instantiate

      a new Receiver
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: getMessageIterator()
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.getMessageIterator'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Gets an async iterator over messages from the receiver.

      Throws an error if there is another receive operation in progress on the
      same receiver. If you

      are not sure whether there is another receive operation running, check the
      `isReceivingMessages`

      property on the receiver.


      If the iterator is not able to fetch a new message in over a minute,
      `undefined` will be returned
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMessageIterator(): AsyncIterableIterator<ServiceBusMessage>'
      return:
        description: ''
        type: >-
          AsyncIterableIterator&lt;@azure/service-bus - <xref
          uid="v1.1.10.ServiceBusMessage" />&gt;
  - name: getState()
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.getState'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Gets the state of the Session. For more on session states, see

      [Session
      State](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getState(): Promise<any>'
      return:
        description: Promise<any> The state of that session
        type: Promise&lt;any&gt;
  - name: isReceivingMessages()
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.isReceivingMessages'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Indicates whether the receiver is currently receiving messages or not.

      When this returns true, new `registerMessageHandler()` or
      `receiveMessages()` calls cannot be made.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function isReceivingMessages(): boolean'
      return:
        description: ''
        type: boolean
  - name: peek(undefined | number)
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.peek'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Fetches the next batch of active messages (including deferred but not
      deadlettered messages) in

      the current session.

      - The first call to `peek()` fetches the first active message. Each
      subsequent call fetches the

      subsequent message.

      - Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function peek(maxMessageCount?: undefined | number):
        Promise<ReceivedMessageInfo[]>
      parameters:
        - id: maxMessageCount
          type: undefined | number
          description: The maximum number of messages to peek. Default value `1`.
      return:
        description: 'Promise<ReceivedMessageInfo[]>'
        type: >-
          Promise&lt;@azure/service-bus - <xref
          uid="v1.1.10.ReceivedMessageInfo" />[]&gt;
  - name: 'peekBySequenceNumber(Long, undefined | number)'
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.peekBySequenceNumber'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Peeks the desired number of active messages (including deferred but not
      deadlettered messages)

      from the specified sequence number in the current session.

      - Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long,
        maxMessageCount?: undefined | number): Promise<ReceivedMessageInfo[]>
      parameters:
        - id: fromSequenceNumber
          type: Long
          description: The sequence number from where to read the message.
        - id: maxMessageCount
          type: undefined | number
          description: ''
      return:
        description: 'Promise<ReceivedSBMessage[]>'
        type: >-
          Promise&lt;@azure/service-bus - <xref
          uid="v1.1.10.ReceivedMessageInfo" />[]&gt;
  - name: receiveDeferredMessage(Long)
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.receiveDeferredMessage'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Returns a promise that resolves to a deferred message identified by the
      given `sequenceNumber`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveDeferredMessage(sequenceNumber: Long):
        Promise<ServiceBusMessage | undefined>
      parameters:
        - id: sequenceNumber
          type: Long
          description: The sequence number of the message that needs to be received.
      return:
        description: |-
          Promise<ServiceBusMessage | undefined>
          - Returns `Message` identified by sequence number.
          - Returns `undefined` if no such message is found.
        type: >-
          Promise&lt;@azure/service-bus - <xref uid="v1.1.10.ServiceBusMessage"
          /> | undefined&gt;
  - name: 'receiveDeferredMessages(Long[])'
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.receiveDeferredMessages'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Returns a promise that resolves to an array of deferred messages
      identified by given `sequenceNumbers`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveDeferredMessages(sequenceNumbers: Long[]):
        Promise<ServiceBusMessage[]>
      parameters:
        - id: sequenceNumbers
          type: 'Long[]'
          description: >-
            An array of sequence numbers for the messages that need to be
            received.
      return:
        description: |-
          Promise<ServiceBusMessage[]>
          - Returns a list of messages identified by the given sequenceNumbers.
          - Returns an empty list if no messages are found.
        type: >-
          Promise&lt;@azure/service-bus - <xref uid="v1.1.10.ServiceBusMessage"
          />[]&gt;
  - name: 'receiveMessages(number, undefined | number)'
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.receiveMessages'
    package: '@azure/service-bus - v1.1.10'
    summary: >
      Returns a promise that resolves to an array of messages based on given
      count and timeout over

      an AMQP receiver link from a Queue/Subscription.

      Throws an error if there is another receive operation in progress on the
      same receiver. If you

      are not sure whether there is another receive operation running, check the
      `isReceivingMessages`

      property on the receiver.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?:
        undefined | number): Promise<ServiceBusMessage[]>
      parameters:
        - id: maxMessageCount
          type: number
          description: The maximum number of messages to receive from Queue/Subscription.
        - id: maxWaitTimeInSeconds
          type: undefined | number
          description: >-
            The total wait time in seconds until which the receiver will attempt
            to receive specified number of messages.

            If this time elapses before the `maxMessageCount` is reached, then
            messages collected till then will be returned to the user.

            - **Default**: `60` seconds.
      return:
        description: >-
          Promise<ServiceBusMessage[]> A promise that resolves with an array of
          Message objects.
        type: >-
          Promise&lt;@azure/service-bus - <xref uid="v1.1.10.ServiceBusMessage"
          />[]&gt;
  - name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.registerMessageHandler'
    package: '@azure/service-bus - v1.1.10'
    summary: >
      Registers handlers to deal with the incoming stream of messages over an
      AMQP receiver link

      from a Queue/Subscription.

      To stop receiving messages, call `close()` on the SessionReceiver.

      Throws an error if there is another receive operation in progress on the
      same receiver. If you

      are not sure whether there is another receive operation running, check the
      `isReceivingMessages`

      property on the receiver.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function registerMessageHandler(onMessage: OnMessage, onError: OnError,
        options?: SessionMessageHandlerOptions)
      parameters:
        - id: onMessage
          type: '@azure/service-bus - <xref uid="v1.1.10.OnMessage" />'
          description: Handler for processing each incoming message.
        - id: onError
          type: '@azure/service-bus - <xref uid="v1.1.10.OnError" />'
          description: >-
            Handler for any error that occurs while receiving or processing
            messages.
        - id: options
          type: >-
            @azure/service-bus - <xref
            uid="v1.1.10.SessionMessageHandlerOptions" />
          description: >
            Options to control whether messages should be automatically
            completed

            or if the lock on the session should be automatically renewed. You
            can control the

            maximum number of messages that should be concurrently processed.
            You can

            also provide a timeout in seconds to denote the amount of time to
            wait for a new message

            before closing the receiver.
  - name: renewSessionLock()
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.renewSessionLock'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Renews the lock on the session for the duration as specified during the
      Queue/Subscription

      creation.

      - Check the `sessionLockedUntilUtc` property on the SessionReceiver for
      the time when the lock expires.

      - When the lock on the session expires
          - No more messages can be received using this receiver
          - If a message is not settled (using either `complete()`, `defer()` or `deadletter()`,
        before the session lock expires, then the message lands back in the Queue/Subscription for the next
        receive operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function renewSessionLock(): Promise<Date>'
      return:
        description: Promise<Date> - New lock token expiry date and time in UTC format.
        type: Promise&lt;Date&gt;
  - name: setState(any)
    uid: '@azure/service-bus - v1.1.10.SessionReceiver.setState'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Sets the state on the Session. For more on session states, see

      [Session
      State](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setState(state: any): Promise<void>'
      parameters:
        - id: state
          type: any
          description: The state that needs to be set.
      return:
        description: ''
        type: Promise&lt;void&gt;
