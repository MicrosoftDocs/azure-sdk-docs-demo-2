### YamlMime:TSType
name: SubscriptionClient
uid: '@azure/service-bus - v1.1.10.SubscriptionClient'
package: '@azure/service-bus - v1.1.10'
summary: >-
  Describes the client that allows interacting with a Service Bus Subscription.

  Use the `createSubscriptionClient` function on the ServiceBusClient object to
  instantiate a

  SubscriptionClient
fullName: SubscriptionClient
remarks: ''
isDeprecated: false
type: class
properties:
  - name: defaultRuleName
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.defaultRuleName'
    package: '@azure/service-bus - v1.1.10'
    summary: The name of the default rule on the subscription.
    fullName: defaultRuleName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultRuleName: string'
      return:
        description: ''
        type: string
  - name: entityPath
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.entityPath'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      The path for the Service Bus Subscription for which this client is
      created.
    fullName: entityPath
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'entityPath: string'
      return:
        description: ''
        type: string
  - name: id
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.id'
    package: '@azure/service-bus - v1.1.10'
    summary: A unique identifier for this client.
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: subscriptionName
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.subscriptionName'
    package: '@azure/service-bus - v1.1.10'
    summary: The name of the Service Bus Subscription for which this client is created.
    fullName: subscriptionName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'subscriptionName: string'
      return:
        description: ''
        type: string
  - name: topicName
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.topicName'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      The name of the Service Bus Topic for whose Subscription, this client is
      created.
    fullName: topicName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'topicName: string'
      return:
        description: ''
        type: string
methods:
  - name: 'addRule(string, boolean | string | CorrelationFilter, undefined | string)'
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.addRule'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Adds a rule on the subscription as defined by the given rule name, filter
      and action.

      **Note**: Remove the default true filter on the subscription before adding
      a rule.

      Otherwise, the added rule will have no affect as the true filter will
      always result in

      the subscription receiving all messages.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addRule(ruleName: string, filter: boolean | string |
        CorrelationFilter, sqlRuleActionExpression?: undefined | string):
        Promise<void>
      parameters:
        - id: ruleName
          type: string
          description: Name of the rule
        - id: filter
          type: >-
            boolean | string | @azure/service-bus - <xref
            uid="v1.1.10.CorrelationFilter" />
          description: >-
            A Boolean, SQL expression or a Correlation filter. For SQL Filter
            syntax, see

            [SQLFilter
            syntax](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-filter).
        - id: sqlRuleActionExpression
          type: undefined | string
          description: >-
            Action to perform if the message satisfies the filtering expression.
            For SQL Rule Action syntax,

            see [SQLRuleAction
            syntax](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-rule-action).
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: close()
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.close'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Closes the AMQP link for the receivers created by this client.

      Once closed, neither the SubscriptionClient nor its receivers can be used
      for any

      further operations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: createReceiver(ReceiveMode)
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.createReceiver'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Creates a Receiver for receiving messages from a Subscription which does
      not have sessions enabled.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode): Receiver'
      parameters:
        - id: receiveMode
          type: '@azure/service-bus - <xref uid="v1.1.10.ReceiveMode" />'
          description: >
            An enum indicating the mode in which messages should be received.
            Possible

            values are:

            - `ReceiveMode.peekLock`: Once a message is received in this mode,
            the receiver has a lock on

            the message for a particular duration. If the message is not settled
            by this time, it lands back

            on Service Bus to be fetched by the next receive operation.

            - `ReceiveMode.receiveAndDelete`: Messages received in this mode get
            automatically removed from

            Service Bus.
      return:
        description: >-
          Receiver A receiver to receive messages from a Subscription which does
          not have

          sessions enabled.
        type: '@azure/service-bus - <xref uid="v1.1.10.Receiver" />'
  - name: 'createReceiver(ReceiveMode, SessionReceiverOptions)'
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.createReceiver_1'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Creates a Receiver for receiving messages from a session enabled
      Subscription. When no sessionId is

      given, a random session among the available sessions is used.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createReceiver(receiveMode: ReceiveMode, sessionOptions:
        SessionReceiverOptions): SessionReceiver
      parameters:
        - id: receiveMode
          type: '@azure/service-bus - <xref uid="v1.1.10.ReceiveMode" />'
          description: >-
            An enum indicating the mode in which messages should be received.
            Possible

            values are:

            - `ReceiveMode.peekLock`: Once a message is received in this mode,
            the receiver has a lock on

            the message for a particular duration. If the message is not settled
            by this time, it lands back

            on Service Bus to be fetched by the next receive operation.

            - `ReceiveMode.receiveAndDelete`: Messages received in this mode get
            automatically removed from

            Service Bus.
        - id: sessionOptions
          type: '@azure/service-bus - <xref uid="v1.1.10.SessionReceiverOptions" />'
          description: >
            Options to provide sessionId and duration of automatic lock renewal
            for

            the session receiver.
      return:
        description: >-
          SessionReceiver A receiver to receive from a session in the
          Subscription.
        type: '@azure/service-bus - <xref uid="v1.1.10.SessionReceiver" />'
  - name: getRules()
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.getRules'
    package: '@azure/service-bus - v1.1.10'
    summary: Gets all rules associated with the subscription
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getRules(): Promise<RuleDescription[]>'
      return:
        description: ''
        type: >-
          Promise&lt;@azure/service-bus - <xref uid="v1.1.10.RuleDescription"
          />[]&gt;
  - name: peek(undefined | number)
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.peek'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Fetches the next batch of active messages (including deferred but not
      deadlettered messages).

      - The first call to `peek()` fetches the first active message. Each
      subsequent call fetches the

      subsequent message.

      - Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function peek(maxMessageCount?: undefined | number):
        Promise<ReceivedMessageInfo[]>
      parameters:
        - id: maxMessageCount
          type: undefined | number
          description: ''
      return:
        description: 'Promise<ReceivedSBMessage[]>'
        type: >-
          Promise&lt;@azure/service-bus - <xref
          uid="v1.1.10.ReceivedMessageInfo" />[]&gt;
  - name: 'peekBySequenceNumber(Long, undefined | number)'
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.peekBySequenceNumber'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Peeks the desired number of active messages (including deferred but not
      deadlettered messages)

      from the specified sequence number.

      - Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long,
        maxMessageCount?: undefined | number): Promise<ReceivedMessageInfo[]>
      parameters:
        - id: fromSequenceNumber
          type: Long
          description: The sequence number from where to read the message.
        - id: maxMessageCount
          type: undefined | number
          description: ''
      return:
        description: 'Promise<ReceivedSBMessage[]>'
        type: >-
          Promise&lt;@azure/service-bus - <xref
          uid="v1.1.10.ReceivedMessageInfo" />[]&gt;
  - name: removeRule(string)
    uid: '@azure/service-bus - v1.1.10.SubscriptionClient.removeRule'
    package: '@azure/service-bus - v1.1.10'
    summary: >-
      Removes the rule on the subscription identified by the given rule name.

      **Caution**: If all rules on a subscription are removed, then the
      subscription will not receive

      any more messages.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeRule(ruleName: string): Promise<void>'
      parameters:
        - id: ruleName
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
