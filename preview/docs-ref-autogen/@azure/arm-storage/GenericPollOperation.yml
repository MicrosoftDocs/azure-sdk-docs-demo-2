### YamlMime:TSType
name: GenericPollOperation
uid: '@azure/arm-storage.GenericPollOperation'
package: '@azure/arm-storage'
summary: ''
fullName: 'GenericPollOperation<TResult, TState>'
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      GenericPollOperation(TState & ResumablePollOperationState<TResult>,
      LongRunningOperation<TResult>)
    uid: '@azure/arm-storage.GenericPollOperation.constructor'
    package: '@azure/arm-storage'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new GenericPollOperation(state: TState &
        ResumablePollOperationState<TResult>, lro:
        LongRunningOperation<TResult>)
      parameters:
        - id: state
          type: >-
            TState & <xref uid="@azure/arm-storage.ResumablePollOperationState"
            />&lt;TResult&gt;
          description: ''
        - id: lro
          type: >-
            <xref uid="@azure/arm-storage.LongRunningOperation"
            />&lt;TResult&gt;
          description: ''
properties:
  - name: state
    uid: '@azure/arm-storage.GenericPollOperation.state'
    package: '@azure/arm-storage'
    summary: ''
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: TState & ResumablePollOperationState<TResult>'
      return:
        description: ''
        type: >-
          TState & <xref uid="@azure/arm-storage.ResumablePollOperationState"
          />&lt;TResult&gt;
methods:
  - name: cancel()
    uid: '@azure/arm-storage.GenericPollOperation.cancel'
    package: '@azure/arm-storage'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function cancel(): Promise<PollOperation<TState, TResult>>'
      return:
        description: ''
        type: 'Promise&lt;PollOperation&lt;TState, TResult&gt;&gt;'
  - name: setPollerConfig(PollerConfig)
    uid: '@azure/arm-storage.GenericPollOperation.setPollerConfig'
    package: '@azure/arm-storage'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setPollerConfig(pollerConfig: PollerConfig)'
      parameters:
        - id: pollerConfig
          type: <xref uid="@azure/arm-storage.PollerConfig" />
          description: ''
  - name: toString()
    uid: '@azure/arm-storage.GenericPollOperation.toString'
    package: '@azure/arm-storage'
    summary: Serializes the Poller operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(): string'
      return:
        description: ''
        type: string
  - name: >-
      update(undefined | { abortSignal?: AbortSignalLike | undefined,
      fireProgress?: (state: TState) => void | undefined })
    uid: '@azure/arm-storage.GenericPollOperation.update'
    package: '@azure/arm-storage'
    summary: |-
      General update function for LROPoller, the general process is as follows
      1. Check initial operation result to determine the strategy to use
       - Strategies: Location, Azure-AsyncOperation, Original Uri
      2. Check if the operation result has a terminal state
       - Terminal state will be determined by each strategy
       2.1 If it is terminal state Check if a final GET request is required, if so
           send final GET request and return result from operation. If no final GET
           is required, just return the result from operation.
           - Determining what to call for final request is responsibility of each strategy
       2.2 If it is not terminal state, call the polling operation and go to step 1
           - Determining what to call for polling is responsibility of each strategy
           - Strategies will always use the latest URI for polling if provided otherwise
             the last known one
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(options?: undefined | { abortSignal?: AbortSignalLike |
        undefined, fireProgress?: (state: TState) => void | undefined }):
        Promise<PollOperation<TState, TResult>>
      parameters:
        - id: options
          type: >-
            undefined | { abortSignal?: AbortSignalLike | undefined,
            fireProgress?: (state: TState) =&gt; void | undefined }
          description: ''
      return:
        description: ''
        type: 'Promise&lt;PollOperation&lt;TState, TResult&gt;&gt;'
